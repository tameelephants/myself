<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans       	  
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/aop
       	   http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
       	   http://www.springframework.org/schema/context
       	   http://www.springframework.org/schema/context/spring-context-3.2.xsd
       	   http://www.springframework.org/schema/tx
       	   http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

	<!-- 使用外部的properties方式配置 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:conf/jdbc.properties</value>
				<!-- <value>classpath:redis.properties</value>
				<value>classpath:solr.properties</value> -->
			</list>
		</property>
	</bean>

	<!-- jndi内部配置 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		
		<!-- 心跳设置 -->
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池最大数量 -->
		<!-- <property name="maxActive" value="${maxActive}"></property>
		连接池最大空闲
		<property name="maxIdle" value="${maxIdle}"></property>
		连接池最小空闲
		<property name="minIdle" value="${minIdle}"></property>
		获取连接最大等待时间
		<property name="maxWait" value="${maxWait}"></property> -->
	</bean>
	<!-- 配置sqlSessionFactoryBean 不继承用SqlSessionTemplate -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation"
			value="classpath:spring/mybatis-config.xml" />
		<property name="mapperLocations" value="classpath:cn/cj/mapper/*.xml"></property>
		<!-- <property name="mapperLocations">
			<array>
				<value>classpath:mapper/*.xml</value>
				<value>classpath:cn/cj/mapper/*.xml</value>
			</array>
		</property> -->
	</bean>
	<!-- 方法4 扫描dao自动装配包(注意这里是映射接口,不是xml) -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.cj.dao" />
	</bean>


	<!-- 异常事务回滚123 -->
	<!-- 1.声明一个事务 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 2.事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="rb*" propagation="REQUIRED" />
			<tx:method name="*" read-only="true"
				rollback-for="Exception,RuntimeException,SQLException"
				propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<!-- 3.aop配置 -->
	<aop:config proxy-target-class="true">
		<!-- 切入点 -->
		<aop:pointcut id="servicesPointcut"
			expression="execution(* cn.cj.service..*.*(..))" />
		<!-- 运行拦截 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="servicesPointcut" />
	</aop:config>



	<!-- redis -->
	<!-- <import resource="classpath:resources/redis/redis-context.xml" /> -->
	<!-- 搜索框架 -->
	<!-- <import resource="classpath:resources/solr/applicationContext-solr.xml"/> -->
	<aop:aspectj-autoproxy /> 
	<!-- 扫描service自动装配包 -->
	<context:component-scan
		base-package="cn.cj.service.*" />

</beans>